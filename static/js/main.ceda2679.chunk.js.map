{"version":3,"sources":["logic/useDarkMode.js","logic/useLocalStorage.js","components/Toggle/Toggle.js","components/Header.js","components/Notfound.js","api/Api.js","components/AutocompleteCity.js","components/WeekForecast/DayCard.js","components/WeekForecast/WeekForecast.js","components/WeekForecast/DegreeToggle.js","components/Home/Home.js","components/Favorites/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["useDarkMode","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","enabledState","setEnabledState","useEffect","element","document","body","classList","add","remove","Toggle","darkMode","setDarkMode","className","type","onClick","id","checked","onChange","htmlFor","Header","activeClassName","to","NotFound","API_KEY","process","API_HOST","getCities","str","fetch","CitiesAutocompleteApiUrl","then","response","json","res","map","city","name","LocalizedName","Key","getCurrentCity","lat","long","LocationApiUrl","getTodayWeather","OneDayWeatherApiUrl","DailyForecasts","getFiveDayWeather","FiveDayWeatherApiUrl","AutocompleteCity","isSearchOpen","setIsSearchOpen","cities","loading","handleInputChange","setNewCity","defaultCity","Autocomplete","style","width","open","onOpen","onClose","getOptionSelected","option","getOptionLabel","options","event","reason","current","renderInput","params","TextField","label","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","moment","require","DayCard","data","degreeType","newDate","cityName","Date","weekday","EpochDate","setTime","minFahrenheit","Math","round","Temperature","Minimum","Value","minCelsius","maxFahrenheit","Maximum","maxCelsius","dayIconNumber","Day","Icon","dayIconURL","nightIconNumber","Night","nightIconURL","format","src","alt","IconPhrase","WeekForecast","cityNumber","weekData","setWeekData","weeklyData","index","DegreeToggle","updateForecastDegree","Home","useContext","FavoritesContext","favorites","setDefaultCity","updateFavorites","setDegreeType","usePosition","enableHighAccuracy","latitude","longitude","setCities","query","setQuery","isFavorite","setIsFavorite","currentCity","setCurrentCity","useRef","useDebouncedCallback","debouncedCallback","some","fav","target","IconButton","delFavorite","undefined","newFavorite","aria-label","Favorites","weatherData","setWeatherData","allCitiesWeather","Promise","all","a","todayWeather","length","React","createContext","App","setFavorites","Provider","oldFavorites","filter","exact","path","component","Notfound","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ceda2679.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport useLocalStorage from './useLocalStorage';\n\nconst useDarkMode = () => {\n  const [enabledState, setEnabledState] = useLocalStorage('dark-mode-enabled');\n\n  useEffect(\n    () => {\n      const className = 'dark-mode';\n      const element = window.document.body;\n      if (enabledState) {\n        element.classList.add(className);\n      } else {\n        element.classList.remove(className);\n      }\n    },\n    [enabledState]\n  );\n\n  return [enabledState, setEnabledState];\n}\n\nexport default useDarkMode;\n","import { useState } from 'react';\n\nexport default function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","import React from 'react';\nimport './toggle.scss'\n\nconst Toggle = ({ darkMode, setDarkMode }) => (\n  <div className=\"dark-mode-toggle\">\n    <button type=\"button\" onClick={() => setDarkMode(false)}>\n      ☀\n    </button>\n    <span className=\"toggle-control\">\n      <input\n        className=\"dmcheck\"\n        id=\"dmcheck\"\n        type=\"checkbox\"\n        checked={darkMode}\n        onChange={() => setDarkMode(!darkMode)}\n      />\n      <label htmlFor=\"dmcheck\" />\n    </span>\n    <button type=\"button\" onClick={() => setDarkMode(true)}>\n      ☾\n    </button>\n  </div>\n);\n\nexport default Toggle;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport useDarkMode from '../logic/useDarkMode';\nimport Toggle from './Toggle/Toggle';\n\nfunction Header() {\n  const [darkMode, setDarkMode] = useDarkMode();\n\n  return (\n    <nav className=\"navbar\">\n      <span className=\"herolo\">Herolo Weather Task</span>\n      <NavLink activeClassName=\"active\" to=\"/home\">\n        Home\n      </NavLink>\n      <NavLink activeClassName=\"active\" to=\"/favorites\">\n        Favorites\n      </NavLink>\n      <Toggle darkMode={darkMode} setDarkMode={setDarkMode} />\n    </nav>\n  );\n}\nexport default Header;","import React from \"react\";\n\nfunction NotFound() {\n    return (\n        <div>\n            <h1>Page Not Found</h1>\n        </div>\n    );\n}\n\nexport default NotFound;","const API_KEY = process.env.REACT_APP_API_KEY;\nconst API_HOST = 'http://dataservice.accuweather.com/';\nconst API_VERSION = 'v1';\n\nconsole.log(process.env.API_KEY)\n\n\nconst CitiesAutocompleteApiUrl = (str) => `${API_HOST}locations/${API_VERSION}/cities/autocomplete?apikey=${API_KEY}&q=${str}`;\n\nconst LocationApiUrl = (lat, long) => `${API_HOST}locations/${API_VERSION}/cities/geoposition/search?apikey=${API_KEY}&q=${lat},${long}`;\n\nconst OneDayWeatherApiUrl = key => `${API_HOST}forecasts/${API_VERSION}/daily/1day/${key}?apikey=${API_KEY}`;\n\nconst FiveDayWeatherApiUrl = key => `${API_HOST}forecasts/${API_VERSION}/daily/5day/${key}?apikey=${API_KEY}`;\n\nexport function getCities(str) {\n    return fetch(CitiesAutocompleteApiUrl(str)).then(response => response.json()).then(res => {\n        return res.map(city => ({\n            name: city.LocalizedName,\n            key: city.Key,\n        }));\n    });\n}\n\nexport function getCurrentCity(lat, long) {\n    return fetch(LocationApiUrl(lat, long)).then(response => response.json()).then(res => ({\n        name: res.LocalizedName,\n        key: res.Key,\n    }))\n}\n\nexport function getTodayWeather(key) {\n    return fetch(OneDayWeatherApiUrl(key)).then(response => response.json()).then(res => {\n        return res.DailyForecasts[0];\n    })\n}\n\nexport function getFiveDayWeather(key) {\n    return fetch(FiveDayWeatherApiUrl(key)).then(response => response.json()).then(res => {\n        return res.DailyForecasts;\n    })\n}","import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst AutocompleteCity = ({ isSearchOpen, setIsSearchOpen, cities, loading, handleInputChange, setNewCity, defaultCity }) => {\n    return (\n        <Autocomplete\n            id=\"asynchronous-demo\"\n            style={{ width: 280 }}\n            open={isSearchOpen}\n            onOpen={() => {\n                setIsSearchOpen(true);\n            }}\n            onClose={() => {\n                setIsSearchOpen(false);\n            }}\n            getOptionSelected={(option, value) => option.name === value.name}\n            getOptionLabel={option => option.name}\n            options={cities}\n            onChange={(event, value, reason) => {\n                const selectedCity = value || defaultCity;\n                setNewCity(selectedCity)\n            }}\n\n            loading={loading.current}\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    label=\"Chose City\"\n                    variant=\"outlined\"\n                    onChange={handleInputChange}\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {loading.current ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                />\n            )}\n        />\n    );\n}\n\nexport default AutocompleteCity;","import React from 'react';\nvar moment = require('moment');\n\nconst DayCard = ({ data, degreeType, type, cityName }) => {\n  let newDate = new Date();\n  const weekday = data.EpochDate * 1000\n  newDate.setTime(weekday)\n\n  const minFahrenheit = Math.round(data.Temperature.Minimum.Value);\n  const minCelsius = Math.round((minFahrenheit - 32) * 5/9);\n\n  const maxFahrenheit = Math.round(data.Temperature.Maximum.Value);\n  const maxCelsius = Math.round((maxFahrenheit - 32) * 5/9);\n\n  const dayIconNumber = data.Day.Icon < 10 ? `0${data.Day.Icon}` : data.Day.Icon;\n  const dayIconURL = `https://developer.accuweather.com/sites/default/files/${dayIconNumber}-s.png`;\n\n  const nightIconNumber = data.Night.Icon < 10 ? `0${data.Night.Icon}` : data.Night.Icon;\n  const nightIconURL = `https://developer.accuweather.com/sites/default/files/${nightIconNumber}-s.png`;\n\n  return (\n      <div className=\"card\">\n        <h3 className=\"card-title\">{type === 'city' ? data.cityName : moment(newDate).format('dddd')}</h3>\n        <p className=\"text-muted\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\n        <img src={dayIconURL} alt=\"Logo\" />\n        <h2>Day {degreeType === \"celsius\" ? minCelsius + \"°C\" : minFahrenheit + \"°F\"}</h2>\n        <img src={nightIconURL} alt=\"Logo\" />\n        <h2>Night {degreeType === \"celsius\" ? maxCelsius + \"°C\" : maxFahrenheit + \"°F\"}</h2>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{data.Day.IconPhrase}</p>\n        </div>\n      </div>\n  )\n}\n\nexport default DayCard;","import React, { useEffect, useState } from \"react\";\nimport { getFiveDayWeather } from '../../api/Api';\nimport DayCard from './DayCard';\nimport './weekForecast.scss'\n\nfunction WeekForecast({ cityNumber, degreeType }) {\n\n    const [weekData, setWeekData] = useState([]);\n\n    useEffect(() => {\n        if (cityNumber) {\n            getFiveDayWeather(cityNumber).then((weeklyData) => {\n                setWeekData(weeklyData)\n            })\n        }\n    }, [cityNumber]);\n\n    const formatDayCards = () => {\n        return weekData.map((data, index) => <DayCard data={data} degreeType={degreeType} key={index} />)\n    }\n\n    return (\n        <div className='dailyForecast'>\n            <div className='dailyCards'>\n            {formatDayCards()}\n            </div>\n        </div>\n    );\n}\n\nexport default WeekForecast;","\nimport React from 'react';\n\nconst DegreeToggle = ({degreeType, updateForecastDegree}) => {\n  return (\n    <div className='degreeToggle'>\n    <div className=\"form-check form-check-inline\">\n        <input\n        className=\"form-check-input\"\n        type=\"radio\"\n        name=\"degree-type\"\n        id=\"celsius\"\n        value=\"celsius\"\n        checked={degreeType === \"celsius\"}\n        onChange={updateForecastDegree}\n        />\n        <label className=\"form-check-label\" htmlFor=\"celsius\">&#8451;</label>\n      </div>\n      <div className=\"form-check form-check-inline\">\n        <input\n        className=\"form-check-input\"\n        type=\"radio\"\n        name=\"degree-type\"\n        id=\"farenheit\"\n        value=\"fahrenheit\"\n        checked={degreeType === \"fahrenheit\"}\n        onChange={updateForecastDegree}\n        />\n        <label className=\"form-check-label\" htmlFor=\"farenheit\">&#8457;</label>\n      </div>\n    </div>\n  )\n}\n\nexport default DegreeToggle;","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { getCities, getCurrentCity } from '../../api/Api';\nimport AutocompleteCity from '../AutocompleteCity';\nimport { usePosition } from 'use-position';\nimport WeekForecast from '../WeekForecast/WeekForecast';\nimport DegreeToggle from '../WeekForecast/DegreeToggle';\nimport AddIcon from '@material-ui/icons/Favorite';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FavoritesContext } from '../../App';\nimport './home.scss';\n\nconst Home = () => {\n  const { favorites, defaultCity, setDefaultCity, updateFavorites, degreeType, setDegreeType } = useContext(FavoritesContext);\n\n  const { latitude, longitude } = usePosition(false, {\n    enableHighAccuracy: true,\n  });\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [cities, setCities] = useState([]);\n  const [query, setQuery] = useState('');\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [currentCity, setCurrentCity] = useState(defaultCity);\n  const loading = useRef(false);\n\n  const fetchCities = (query) => {\n    getCities(query).then((cities) => {\n      loading.current = false;\n      setCities(cities);\n    });\n  }\n\n  const [debouncedCallback] = useDebouncedCallback(fetchCities, 500);\n\n  useEffect(() => {\n    if (latitude) {\n      getCurrentCity(latitude, longitude).then((city) => {\n        setDefaultCity(city);\n      })\n    }\n  }, [latitude, longitude, setDefaultCity, favorites]);\n\n  useEffect(() => {\n    if (query) {\n      loading.current = true;\n      debouncedCallback(query)\n    } else {\n      loading.current = false;\n      setCities([]);\n    }\n  }, [query, debouncedCallback]);\n\n  useEffect(() => {\n    if (favorites.some(fav => fav.key === currentCity.key)) {\n      setIsFavorite(true);\n    } \n  }, []);\n\n  useEffect(() => {\n    if (!isSearchOpen) {\n      setCities([]);\n    }\n  }, [isSearchOpen]);\n\n  const handleInputChange = (event) => {\n    setQuery(event.target.value)\n  }\n\n  const updateForecastDegree = event => {\n    setDegreeType(event.target.value)\n  }\n\n  const addToFavorites = () => {\n    if (!isFavorite) {\n      setIsFavorite(true);\n      const newFavorite = currentCity.name ? currentCity : defaultCity;\n      updateFavorites(favorites, newFavorite);\n    } else {\n      setIsFavorite(false);\n      const delFavorite = currentCity.name ? currentCity : defaultCity;\n      updateFavorites(favorites, undefined, delFavorite);\n    }\n  }\n\n  const setNewCity = (city) => {\n    if (favorites.some(fav => fav.key === city.key)) {\n      setIsFavorite(true);\n    } else {\n      setIsFavorite(false);\n    }\n    setCurrentCity(city)\n  }\n\n  return (\n    <div className='homeWeather'>\n      <div className=\"CitySelector\">\n        <AutocompleteCity\n          isSearchOpen={isSearchOpen}\n          setIsSearchOpen={setIsSearchOpen}\n          cities={cities}\n          loading={loading}\n          defaultCity={defaultCity}\n          handleInputChange={handleInputChange}\n          setNewCity={setNewCity}\n        />\n      </div>\n      {currentCity.name || defaultCity.name ?\n        [<IconButton key={0} onClick={addToFavorites} color={isFavorite ? 'secondary' : \"inherit\"} aria-label=\"add an alarm\">\n          <AddIcon />\n          <div className='currentCity'>{currentCity.name || defaultCity.name}</div>\n        </IconButton>,\n        <div key={2} className='fiveDay'>5-Day Forecast.</div>,\n        <DegreeToggle key={1} degreeType={degreeType} updateForecastDegree={updateForecastDegree} />,\n        <WeekForecast key={3} cityNumber={currentCity.key || defaultCity.key} degreeType={degreeType} />\n        ]\n        : <div className='currentCity'>Loading my city... (Allow Location)</div>}\n    </div>\n  );\n}\n\nexport default Home;","import React, { useContext, useEffect, useState } from \"react\";\nimport { FavoritesContext } from '../../App';\nimport { getTodayWeather } from '../../api/Api';\nimport DayCard from '../WeekForecast/DayCard';\nimport DegreeToggle from '../WeekForecast/DegreeToggle';\nimport './favorites.scss';\nfunction Favorites() {\n    const { favorites, updateFavorites, degreeType, setDegreeType } = useContext(FavoritesContext);\n    const [weatherData, setWeatherData] = useState([]);\n\n    useEffect(() => {\n        const allCitiesWeather = [];\n        Promise.all(\n            favorites.map(async (fav, index) => {\n                const todayWeather = await getTodayWeather(fav.key);\n                todayWeather.cityName = fav.name;\n                allCitiesWeather[index] = todayWeather;\n            })\n        ).then(() => {\n            setWeatherData(allCitiesWeather);\n        });\n    }, []);\n\n    const updateForecastDegree = event => {\n        setDegreeType(event.target.value)\n    }\n\n    const formatDayCards = () => {\n        return weatherData.map((data, index) => <DayCard type={'city'} data={data} degreeType={degreeType} key={index} />)\n    }\n\n    return (\n        <div className='favorites'>\n            {favorites.length > 0 ?\n                (<>\n                    <div key={2} className='todayTitle'>Today's Forecast.</div>\n                    {weatherData.length > 0 && <DegreeToggle key={1} degreeType={degreeType} updateForecastDegree={updateForecastDegree} />}\n                    <div className='dailyForecast'>\n                        <div className='dailyCards'>\n                            {formatDayCards()}\n                        </div>\n                    </div>\n                </>) : <div key={2} className='addCity'>Add city to favorites in the Home screen.</div>}\n        </div>\n    );\n}\n\nexport default Favorites;","import React, { useState } from 'react';\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nimport Header from \"./components/Header\";\nimport Notfound from \"./components/Notfound\";\nimport Home from \"./components/Home/Home\";\nimport Favorites from \"./components/Favorites/Favorites\";\n\nexport const FavoritesContext = React.createContext(null);\n\nconst App = () => {\n    const [favorites, setFavorites] = useState([]);\n    const [defaultCity, setDefaultCity] = useState({});\n    const [degreeType, setDegreeType] = useState('fahrenheit');\n\n    const updateFavorites = (oldFavorites, newFavorite, delFavorite) => {\n        if (newFavorite) {\n            setFavorites([...oldFavorites, newFavorite])\n        }\n        if (delFavorite) {\n            setFavorites(oldFavorites.filter(fav => fav.key !== delFavorite.key))\n        }\n    }\n    return (\n        <FavoritesContext.Provider value={{ favorites, defaultCity, updateFavorites, setDefaultCity, degreeType, setDegreeType }}>\n            <Router>\n                <div>\n                    <Header />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route path=\"/home\" component={Home} />\n                        <Route path=\"/favorites\" component={Favorites} />\n                        <Route component={Notfound} />\n                    </Switch>\n                </div>\n            </Router>\n        </FavoritesContext.Provider >\n    )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}